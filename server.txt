#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define PORT 8080
#define MAX_BUFFER_SIZE 1024
#define FILES_DIR "server_files/"
#define MAX_FILEPATH_SIZE 2048

void *handle_client(void *socket_desc);

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);

    // Create socket
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Bind socket to port
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Listen for connections
    if (listen(server_fd, 10) < 0) {
        perror("listen");
        close(server_fd);
        exit(EXIT_FAILURE);
    }
    
    printf("Server listening on port %d\n", PORT);

    while (1) {
        // Accept incoming connection
        new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen);
        if (new_socket < 0) {
            perror("accept");
            continue;
        }
        
        printf("New connection accepted\n");

        // Create a new thread for the client
        pthread_t thread_id;
        if (pthread_create(&thread_id, NULL, handle_client, (void*)&new_socket) < 0) {
            perror("pthread_create");
            close(new_socket);
        }
    }

    close(server_fd);
    return 0;
}

void *handle_client(void *socket_desc) {
    int sock = *(int*)socket_desc;
    char buffer[MAX_BUFFER_SIZE] = {0};

    recv(sock, buffer, MAX_BUFFER_SIZE, 0);
    printf("Client: %s\n", buffer);
   
    char *greeting = "Hello from server";
    send(sock, greeting, strlen(greeting), 0);
   
    memset(buffer, 0, MAX_BUFFER_SIZE);
    recv(sock, buffer, MAX_BUFFER_SIZE, 0);
    printf("Requested file: %s\n", buffer);
   
    char filepath[MAX_FILEPATH_SIZE];
    snprintf(filepath, sizeof(filepath), "%s%s", FILES_DIR, buffer);
    printf("File path: %s\n", filepath);
   
    // Open and send file
    FILE *file = fopen(filepath, "rb");
    if (file == NULL) {
        perror("file not found");
        close(sock);
        pthread_exit(NULL);
    }

    char file_buffer[MAX_BUFFER_SIZE];
    size_t bytes_read;
    while ((bytes_read = fread(file_buffer, 1, sizeof(file_buffer), file)) > 0) {
        send(sock, file_buffer, bytes_read, 0);
    }

    fclose(file);
    close(sock);
    pthread_exit(NULL);
}
